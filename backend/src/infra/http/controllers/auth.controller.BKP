import { Request, Response } from 'express';
import { AuthenticateUserUseCase } from '../../../use-cases/authenticate-user.use-case';
import { ILdapAuthProvider } from '../../../core/ports/ldap-auth-provider';
import { messages } from '@/core/messages/messages';
import { logger } from '@/infra/log/logger';

export class AuthController {
    constructor(private ldapProvider: ILdapAuthProvider) { }

    async login(req: Request, res: Response) {
        const { email, password } = req.body;
        logger.info({ email }, 'Iniciando autenticação');
        const useCase = new AuthenticateUserUseCase(this.ldapProvider);

        try {
            const { token, roles, email: userEmail } = await useCase.execute(email, password);
            logger.info({ userEmail, roles }, messages.auth.success);
            return res.status(200).json({ token, roles, message: messages.auth.success });
        } catch (err: any) {

            logger.error(email, err.message, messages.auth.invalidCredentials);
            return res.status(400).json({ message: messages.auth.invalidCredentials });
        }
    }
}