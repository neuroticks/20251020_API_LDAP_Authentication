import jwt, { SignOptions, Secret, Algorithm } from 'jsonwebtoken';
import { UserPayload } from '@/core/domain/types/user-payload';
import { env } from '@/infra/config/env';
import { logger } from '@/infra/log/logger';
import { messages } from '@/core/messages/messages';

export class JwtService {
  private static get secret(): Secret {
    if (!env.JWT_SECRET) {
      logger.error(messages.generic.jwtSecretNotLoaded);
      throw new Error(messages.auth.connectionError);
    }
    return env.JWT_SECRET;
  }

  private static readonly algorithm: Algorithm = 'HS512';

  static sign(
    payload: UserPayload,
    expiresIn: SignOptions['expiresIn'] = '30m'
  ): string {
    const options: SignOptions = {
      expiresIn,
      algorithm: this.algorithm,
    };

    const token = jwt.sign(payload, this.secret, options);
    logger.debug({ user: payload.email, roles: payload.roles }, messages.auth.success);
    return token;
  }

  static verify(token: string): UserPayload {
    const decoded = jwt.verify(token, this.secret, {
      algorithms: [this.algorithm],
    });

    logger.debug({ user: (decoded as UserPayload).email }, 'Token JWT verificado');
    return decoded as UserPayload;
  }
}
